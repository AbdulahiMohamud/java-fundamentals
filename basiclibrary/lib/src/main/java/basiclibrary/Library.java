/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Random;

public class Library {
    public static void main(String[] args) {

    }



    public boolean someLibraryMethod() {
        return true;
    }


//Rolling Dice feature
    public  int[] roll(int n){
        Random rand = new Random();
        int[] timesRolled = new int[n];

        for (int i = 0; i < n; i++) {
            int randoNum = rand.nextInt(6);
            timesRolled[i] = randoNum + 1;
        }
        return timesRolled;

    }
// checking duplicates
    public boolean containsDuplicates (int[] arr) {
        for (int i = 0; i < arr.length; i++){
            for (int j = 1; j < arr.length; j++){
                if (i == j) continue;
                if (arr[i] == arr[j])
                    return true;
            }
        }
        return false;
    }
// getting average
    public double average (int[] arr){
        int num = 0;
        for(int ele : arr) {
            num += ele;
        }
        double results = (double)num / arr.length;
        return results;
    }

   public int[] lowestArrAverage(int[] []arr) {
        int num = 0;
        double lowAvg = average(arr[0]);
        double currentAvg = lowAvg;
        for (int i=0 ; i < arr.length; i++){
            currentAvg = average(arr[i]);
            if(currentAvg < lowAvg) {
                lowAvg = currentAvg;
                num = i;
            }
        }
       return arr[num];
   }

   public static String temp (int [][] arr) {
       String results = "";
       int highTemp = arr[0][0];
       int lowTemp = arr[0][0];
       HashSet<Integer> tempdata = new HashSet<>();
       for (int i = 0; i < arr.length; i++) {
           for (int j = 0; j < arr[i].length; j++) {
               if (arr[i][j] > highTemp)
                   highTemp = arr[i][j];
               if (arr[i][j] < lowTemp)
                   lowTemp = arr[i][j];
               tempdata.add(arr[i][j]);
           }
       }
       System.out.println("High: " + highTemp);
       System.out.println("Low: " + lowTemp);
       for (int i = lowTemp; i <= highTemp; i++) {
           if (tempdata.contains(i))
               results += i + " ";
           else
               System.out.println("Never saw temperature: " + i);
       }
       return results;
   }

   public static String tally (List<String> arr) {

        HashMap<String, Integer> votes = new HashMap<>();
        int numVotes = 0;
        String elected = "";

        for (String vote : arr) {
            if (votes.containsKey(vote)) {
                votes.put(vote, votes.get(vote) + 1);

            } else {
                votes.put(vote, 0);
            }
            for (String candidate : arr) {
                if(votes.get(vote) > numVotes) {
                    numVotes = votes.get(vote);
                    elected = vote;
                }
            }

        }
       return elected;

   }




}





